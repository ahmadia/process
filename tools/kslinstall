#!/usr/bin/env python

import os
from os import makedirs
from shutil import rmtree
import subprocess
import logging
import logging.handlers
from optparse import OptionParser
import string
from ksl.install.installer import installer

def main():
    (options, args) = get_options()
    setup_installer_log(options)
    installer_variants = parse_install_file(options, args)
    for variant in installer_variants:
        try:
            variant_logs = []
            if variant.build_host != os.uname()[4]:
                log = logging.getLogger('ksl.installer')
                log.info('skipping build %s because it requires build arch %s [host arch: %s]' %
                         (variant.target_arch+variant.tag, variant.build_host, os.uname()[4]))
                continue

            variant_logs = setup_package_logs(variant)
            setup_target_dir(variant, options)
            if options.do_install:
                clobber_dir(variant, variant.target_dir, options)
                variant.install()
            if options.do_module:
                setup_module_dir(variant, options)
                variant.install_module()
            close_logs(variant_logs)

        except Exception, err:
            log = logging.getLogger('ksl.installer')
            log.error('error during install of variant %s: %s' % (variant.target_arch+variant.tag, err))
            close_logs(variant_logs)
            raise

def get_options():
    parser = OptionParser()
    parser.add_option("-q", "--quiet",
                      action="store_false", dest="verbose", default=True,
                      help="silence informational status messages")
    parser.add_option("-f", "--force",
                      action="store_true", dest="force", default=False,
                      help="clobber target directories and files")
    parser.add_option("-r", "--root",
                      action="store", dest="root", default="/opt/share/ksl",
                      help="root directory to install to (default: /opt/share/ksl)")
    parser.add_option("-s", "--source_paths",
                      action="store", dest="source_paths",
                      default="/opt/share/ksl/system/sources",
                      help="source paths to search " +\
                      "(default: /opt/share/ksl/system/sources)")
    parser.add_option("-p", "--patch_paths",
                      action="store", dest="patch_paths",
                      default="/opt/share/ksl/system/patches",
                      help="patch paths to search " +\
                      "(default: /opt/share/ksl/system/patches)")
    parser.add_option("-b", "--build_dir",
                      action="store", dest="build_dir", default="./kslbuild",
                      help="working build directory (default: ./klsbuild)")
    parser.add_option("-c", "--module_cmd",
                      action="store", dest="module_cmd",
                      default="/opt/share/ksl/tools/Modules/3.2.7/bin/modulecmd",
                      help="module command " + \
                      "(default: /opt/share/ksl/tools/Modules/3.2.7/bin/modulecmd)")
    parser.add_option("-m", "--root_module_dir",
                      action="store", dest="root_module_dir",
                      default="/opt/share/ksl/modules",
                      help="root module directory to install to" + \
                      "(default: /opt/share/ksl/modules")

    parser.add_option("-t", "--module_template",
                      action="store", dest="module_template",
                      default="/opt/share/ksl/system/templates/module.ksl",
                      help="template module file " + \
                      "(default: /opt/share/ksl/system/templates/module.ksl")
    parser.add_option("--no_install",
                      action="store_false", dest="do_install",
                      default=True,
                      help="Don't install builds")                      
    parser.add_option("--no_module",
                      action="store_false", dest="do_module",
                      default=True,
                      help="Don't install modulefiles")                      

    (options, args) = parser.parse_args()

    if not args:
        raise Exception("You forget to specify an install file!")
    return (options, args)

def setup_installer_log(options):

    if options.verbose:
        logging.basicConfig(level=logging.INFO,
                            format='%(message)s')
    else:
        logging.basicConfig(level=logging.WARNING,
                            format='%(message)s')
    
    # ten backup files at 100MB for a total of ~1GB potential logs 
    syslog = logging.handlers.RotatingFileHandler('/opt/share/ksl/system/logs/ksl_install.log',
                                                  mode='a',
                                                  maxBytes=104857600,
                                                  backupCount=10)
    syslog.setLevel(logging.DEBUG)
    syslogf = logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s %(message)s', '%m-%d %H:%M')
    syslog.setFormatter(syslogf)
    
    logging.getLogger('ksl.installer').addHandler(syslog)


def setup_target_dir(variant, options):
    variant.target_dir = join(
        variant.root,variant.name,variant.version,variant.target_arch+variant.tag)

def setup_module_dir(variant, options):
    log = logging.getLogger('ksl.installer')

    variant_modules_dir = join(options.root_module_dir, variant.target_arch, variant.name)
    if not os.path.exists(variant_modules_dir):
        log.info("creating empty directory %s" % variant_modules_dir)
        os.makedirs(variant_modules_dir)

    module_name = variant.version+variant.tag
 
    if variant.tag == "":
        version_file = join(variant_modules_dir,'.version')
        if os.path.exists(version_file):
            if not options.force:
                confirmation = raw_input(
                    "Can I clobber module default version file %s? [y/n]: " % version_file)
                log.info("deleting version file %s" % version_file)
                os.remove(version_file)
                if confirmation is not 'y':
                    raise Exception(
                        "unwilling to clobber version file %s" % version_file)
        log.info("setting default module version for %s on %s to %s " %
                 (variant.name, variant.target_arch, variant.version))
        file_handle = open(version_file, 'w')
        file_handle.write('#%%Module1.0\nset ModulesVersion "%s"\n' % variant.version)
        file_handle.close()
    else:
        log.info("installing non-default variant to module %s" % module_name)
        
    variant.module_file = join(variant_modules_dir, module_name)

def clobber_dir(variant, clobber_dir, options):
    log = logging.getLogger('ksl.installer')
        
    if os.path.exists(clobber_dir):
        if not options.force:
            confirmation = raw_input(
                "Can I clobber directory %s? [y/n]: " % clobber_dir)
            if confirmation is not 'y':
                raise Exception(
                    "unwilling to clobber directory %s" % clobber_dir)
        log.info("clobbering directory %s" %  clobber_dir)
        rmtree(clobber_dir)

    log.info("creating empty directory %s" % clobber_dir)
    makedirs(clobber_dir)

def setup_package_logs(variant):
    root = '/opt/share/ksl/system/logs/installs'
    prefix = variant.name+'-'+variant.version+'-'+variant.release+'_'+variant.target_arch+variant.tag

    logf = logging.Formatter('%(asctime)s %(name)s:\n%(message)s')

    logname = join(root,prefix+'_install.log')
    plog = logging.FileHandler(logname,'w')
    plog.setFormatter(logf)
    
    logging.getLogger('ksl.installer.package').addHandler(plog)

    configurelog = logging.FileHandler(join(root,prefix+'_configure.log'),'w')
    configurelog.setFormatter(logf)
    configurelog.propagate=False
    logging.getLogger('ksl.installer.package.configure').addHandler(configurelog)

    patchlog = logging.FileHandler(join(root,prefix+'_patch.log'),'w')
    patchlog.setFormatter(logf)
    patchlog.propagate=False
    logging.getLogger('ksl.installer.package.patch').addHandler(patchlog)

    makelog = logging.FileHandler(join(root,prefix+'_make.log'),'w')
    makelog.setFormatter(logf)
    makelog.propagate=False
    logging.getLogger('ksl.installer.package.make').addHandler(makelog)

    log = logging.getLogger('ksl.installer')
    log.info('logging install for build %s to %s' % (variant.target_arch+variant.tag, logname))

    return [(plog, 'ksl.installer.package'),
            (configurelog, 'ksl.installer.package.configure'),
            (patchlog, 'ksl.installer.package.patch'),
            (makelog, 'ksl.installer.package.make')]

def close_logs(logs):
    for handle, logname in logs:
        handle.flush()
        handle.close()
        logging.getLogger(logname).removeHandler(handle)
    return

def parse_install_file(options, args):
    log = logging.getLogger('ksl.installer')
    
    installfile = string.join(args)
    if not os.path.exists(installfile):
        raise Exception("couldn't locate install file: %s" % installfile)

    log.info("parsing install file %s" % installfile)

    execfile(installfile,globals())
    for variant in variants:
        variant.root = options.root
        variant.source_paths = options.source_paths
        variant.patch_paths = options.patch_paths
        variant.build_dir = options.build_dir
        variant.module_cmd = options.module_cmd
        variant.module_template = options.module_template

    return variants

if __name__ == "__main__":
    try:
        main()
    except:
        print \
"""There was some sort of error running the script
Please report to Aron Ahmadia <aron.ahmadia@kaust.edu.sa>"""
        raise

