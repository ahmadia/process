diff -Naur numpy/numpy/core/setup.py numpy.bgp/numpy/core/setup.py
--- numpy/numpy/core/setup.py	2010-08-29 13:39:16.001161683 +0300
+++ numpy.bgp/numpy/core/setup.py	2010-08-29 22:51:11.093880248 +0300
@@ -427,16 +427,17 @@
                 moredefs.append(('ENABLE_SEPARATE_COMPILATION', 1))
 
             # Get long double representation
-            if sys.platform != 'darwin':
-                rep = check_long_double_representation(config_cmd)
-                if rep in ['INTEL_EXTENDED_12_BYTES_LE',
-                           'INTEL_EXTENDED_16_BYTES_LE',
-                           'IEEE_QUAD_LE', 'IEEE_QUAD_BE',
-                           'IEEE_DOUBLE_LE', 'IEEE_DOUBLE_BE',
-                           'DOUBLE_DOUBLE_BE']:
-                    moredefs.append(('HAVE_LDOUBLE_%s' % rep, 1))
-                else:
-                    raise ValueError("Unrecognized long double format: %s" % rep)
+            moredefs.append(('HAVE_LDOUBLE_IEEE_DOUBLE_BE'))
+            ## if sys.platform != 'darwin':
+            ##     rep = check_long_double_representation(config_cmd)
+            ##     if rep in ['INTEL_EXTENDED_12_BYTES_LE',
+            ##                'INTEL_EXTENDED_16_BYTES_LE',
+            ##                'IEEE_QUAD_LE', 'IEEE_QUAD_BE',
+            ##                'IEEE_DOUBLE_LE', 'IEEE_DOUBLE_BE',
+            ##                'DOUBLE_DOUBLE_BE']:
+            ##         moredefs.append(('HAVE_LDOUBLE_%s' % rep, 1))
+            ##     else:
+            ##         raise ValueError("Unrecognized long double format: %s" % rep)
 
             # Py3K check
             if sys.version_info[0] == 3:
diff -Naur numpy/numpy/distutils/command/config.py numpy.bgp/numpy/distutils/command/config.py
--- numpy/numpy/distutils/command/config.py	2010-08-29 13:39:02.791248923 +0300
+++ numpy.bgp/numpy/distutils/command/config.py	2010-08-29 22:51:11.093880248 +0300
@@ -38,8 +38,9 @@
                       "involving running executable on the target machine.\n" \
                       "+++++++++++++++++++++++++++++++++++++++++++++++++\n",
                       DeprecationWarning)
-        return old_config.try_run(self, body, headers, include_dirs, libraries,
-                                  library_dirs, lang)
+        return True
+        #return old_config.try_run(self, body, headers, include_dirs, libraries,
+        #                          library_dirs, lang)
 
     def _check_compiler (self):
         old_config._check_compiler(self)
diff -Naur numpy/numpy/distutils/fcompiler/bgp.py numpy.bgp/numpy/distutils/fcompiler/bgp.py
--- numpy/numpy/distutils/fcompiler/bgp.py	1970-01-01 03:00:00.000000000 +0300
+++ numpy.bgp/numpy/distutils/fcompiler/bgp.py	2010-08-29 22:51:11.093880248 +0300
@@ -0,0 +1,71 @@
+import os
+import re
+import sys
+
+from numpy.distutils.fcompiler import FCompiler
+from numpy.distutils.exec_command import exec_command, find_executable
+from numpy.distutils.misc_util import make_temp_file
+from distutils import log
+
+compilers = ['BGPFCompiler']
+
+class BGPFCompiler(FCompiler):
+    compiler_type = 'bgp'
+    description = 'IBM BGP XL Fortran Compiler'
+    version_pattern =  r'(xlf\(1\)\s*|)IBM XL Fortran ((Advanced Edition |)Version |Enterprise Edition V)(?P<version>[^\s*]*)'
+    #IBM XL Fortran Enterprise Edition V10.1 for AIX \nVersion: 10.01.0000.0004
+
+    executables = {
+        'version_cmd'  : ["mpixlf90_r", "-qversion"],
+        'compiler_f77' : ["mpixlf77_r"],
+        'compiler_fix' : ["mpixlf90_r", "-qfixed"],
+        'compiler_f90' : ["mpixlf90_r"],
+        'linker_so'    : ["mpixlf95_r"],
+        'archiver'     : ["ar", "-cr"],
+        'ranlib'       : ["ranlib"]
+        }
+
+    def get_version(self,*args,**kwds):
+        return 'bg/11.1'
+
+    def get_flags(self):
+        return ['-qextname']
+
+    def get_flags_debug(self):
+        return ['-g']
+
+    def get_flags_linker_so(self):
+        opt = []
+        if sys.platform=='darwin':
+            opt.append('-Wl,-bundle,-flat_namespace,-undefined,suppress')
+        else:
+            opt.append('-bshared')
+        version = self.get_version(ok_status=[0,40])
+        if version is not None:
+            if sys.platform.startswith('aix'):
+                xlf_cfg = '/etc/xlf.cfg'
+            else:
+                xlf_cfg = '/etc/opt/ibmcmp/xlf/%s/xlf.cfg' % version
+            fo, new_cfg = make_temp_file(suffix='_xlf.cfg')
+            log.info('Creating '+new_cfg)
+            fi = open(xlf_cfg,'r')
+            crt1_match = re.compile(r'\s*crt\s*[=]\s*(?P<path>.*)/crt1.o').match
+            for line in fi.readlines():
+                m = crt1_match(line)
+                if m:
+                    fo.write('crt = %s/bundle1.o\n' % (m.group('path')))
+                else:
+                    fo.write(line)
+            fi.close()
+            fo.close()
+            opt.append('-F'+new_cfg)
+        return opt
+
+    def get_flags_opt(self):
+        return ['-O5']
+
+if __name__ == '__main__':
+    log.set_verbosity(2)
+    compiler = BGPFCompiler()
+    compiler.customize()
+    print(compiler.get_version())
diff -Naur numpy/numpy/random/setup.py numpy.bgp/numpy/random/setup.py
--- numpy/numpy/random/setup.py	2010-08-29 13:38:58.761275607 +0300
+++ numpy.bgp/numpy/random/setup.py	2010-08-29 22:59:42.674717768 +0300
@@ -23,8 +23,8 @@
         config_cmd = config.get_config_cmd()
         libs = get_mathlibs()
         tc = testcode_wincrypt()
-        if config_cmd.try_run(tc):
-            libs.append('Advapi32')
+#        if config_cmd.try_run(tc):
+#            libs.append('Advapi32')
         ext.libraries.extend(libs)
         return None
 
diff -Naur numpy/site.cfg numpy.bgp/site.cfg
--- numpy/site.cfg	1970-01-01 03:00:00.000000000 +0300
+++ numpy.bgp/site.cfg	2010-08-29 22:51:11.093880248 +0300
@@ -0,0 +1,135 @@
+# This file provides configuration information about non-Python dependencies for
+# numpy.distutils-using packages. Create a file like this called "site.cfg" next
+# to your package's setup.py file and fill in the appropriate sections. Not all
+# packages will use all sections so you should leave out sections that your
+# package does not use.
+
+# To assist automatic installation like easy_install, the user's home directory
+# will also be checked for the file ~/.numpy-site.cfg .
+
+# The format of the file is that of the standard library's ConfigParser module.
+#
+#   http://www.python.org/doc/current/lib/module-ConfigParser.html
+#
+# Each section defines settings that apply to one particular dependency. Some of
+# the settings are general and apply to nearly any section and are defined here.
+# Settings specific to a particular section will be defined near their section.
+#
+#   libraries
+#       Comma-separated list of library names to add to compile the extension
+#       with. Note that these should be just the names, not the filenames. For
+#       example, the file "libfoo.so" would become simply "foo".
+#           libraries = lapack,f77blas,cblas,atlas
+#
+#   library_dirs
+#       List of directories to add to the library search path when compiling
+#       extensions with this dependency. Use the character given by os.pathsep
+#       to separate the items in the list. On UN*X-type systems (Linux, FreeBSD,
+#       OS X):
+#           library_dirs = /usr/lib:/usr/local/lib
+#       On Windows:
+#           library_dirs = c:\mingw\lib,c:\atlas\lib
+#
+#   include_dirs
+#       List of directories to add to the header file earch path.
+#           include_dirs = /usr/include:/usr/local/include
+#
+#   src_dirs 
+#       List of directories that contain extracted source code for the
+#       dependency. For some dependencies, numpy.distutils will be able to build
+#       them from source if binaries cannot be found. The FORTRAN BLAS and
+#       LAPACK libraries are one example. However, most dependencies are more
+#       complicated and require actual installation that you need to do
+#       yourself.
+#           src_dirs = /home/rkern/src/BLAS_SRC:/home/rkern/src/LAPACK_SRC
+#
+#   search_static_first
+#       Boolean (one of (0, false, no, off) for False or (1, true, yes, on) for
+#       True) to tell numpy.distutils to prefer static libraries (.a) over
+#       shared libraries (.so). It is turned off by default.
+#           search_static_first = false
+
+# Defaults
+# ========
+# The settings given here will apply to all other sections if not overridden.
+# This is a good place to add general library and include directories like
+# /usr/local/{lib,include}
+#
+[DEFAULT]
+library_dirs = /usr/local/lib
+include_dirs = /usr/local/include
+libraries = lapack, cblas, esslsmpbg, xlf90_r, xlsmp, xlfmath
+library_dirs = /bgsys/ibm_essl/sles10/prod/opt/ibmmath/lib:/opt/ibmcmp/xlf/bg/11.1/lib:/opt/share/ksl/lapack/pdc/ppc450d/lib:/opt/share/ksl/cblas/pdc/ppc450d/lib:/opt/ibmcmp/xlsmp/bg/1.7/lib
+
+# Optimized BLAS and LAPACK
+# -------------------------
+# Use the blas_opt and lapack_opt sections to give any settings that are
+# required to link against your chosen BLAS and LAPACK, including the regular
+# FORTRAN reference BLAS and also ATLAS. Some other sections still exist for
+# linking against certain optimized libraries (e.g. [atlas], [lapack_atlas]),
+# however, they are now deprecated and should not be used.
+#
+# These are typical configurations for ATLAS (assuming that the library and
+# include directories have already been set in [DEFAULT]; the include directory
+# is important for the BLAS C interface):
+#
+#[blas_opt]
+#
+#[lapack_opt]
+#
+# If your ATLAS was compiled with pthreads, the names of the libraries might be
+# different:
+#
+#[blas_opt]
+#libraries = ptf77blas, ptcblas, atlas
+#
+#[lapack_opt]
+#libraries = lapack, ptf77blas, ptcblas, atlas
+
+# UMFPACK
+# -------
+# The UMFPACK library is used to factor large sparse matrices. It, in turn,
+# depends on the AMD library for reordering the matrices for better performance.
+# Note that the AMD library has nothing to do with AMD (Advanced Micro Devices),
+# the CPU company.
+#
+#   http://www.cise.ufl.edu/research/sparse/umfpack/
+#   http://www.cise.ufl.edu/research/sparse/amd/
+#
+#[amd]
+#amd_libs = amd
+#
+#[umfpack]
+#umfpack_libs = umfpack
+
+# FFT libraries
+# -------------
+# There are two FFT libraries that we can configure here: FFTW (2 and 3) and djbfft.
+#
+#   http://fftw.org/
+#   http://cr.yp.to/djbfft.html
+#
+# Given only this section, numpy.distutils will try to figure out which version
+# of FFTW you are using.
+#[fftw]
+#libraries = fftw3
+#
+# For djbfft, numpy.distutils will look for either djbfft.a or libdjbfft.a . 
+#[djbfft]
+#include_dirs = /usr/local/djbfft/include
+#library_dirs = /usr/local/djbfft/lib
+ 
+ 
+# MKL
+#----
+# For recent (9.0.21, for example) mkl, you need to change the names of the
+# lapack library. Assuming you installed the mkl in /opt, for a 32 bits cpu:
+# [mkl]
+# library_dirs = /opt/intel/mkl/9.1.023/lib/32/
+# lapack_libs = mkl_lapack
+#
+# For 10.*, on 32 bits machines:
+# [mkl]
+# library_dirs = /opt/intel/mkl/10.0.1.014/lib/32/
+# lapack_libs = mkl_lapack
+# mkl_libs = mkl, guide
