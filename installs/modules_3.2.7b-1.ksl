# -*- python -*-
# Modules installation file, KSL supercomputing team
from ksl.install.installer import *
import os
from copy import copy

base = installer()
variants = []

base.name='modules'
base.version='3.2.7b'
base.release='1'
base.license='GNU General Public License (version 2)'
base.vendor='John L. Furlani & Peter W. Osel'
base.url='http://modules.sourceforge.net/'
base.summary='Environment Modules Project'
base.packager='aron'
base.source='modules-3.2.7b.tar.gz'
base.category='utilities'
base.description=\
"""The Environment Modules package provides for the dynamic modification of a user's environment via modulefiles.

Each modulefile contains the information needed to configure the shell
for an application. Once the Modules package is initialized, the
environment can be modified on a per-module basis using the module
command which interprets modulefiles. Typically modulefiles instruct
the module command to alter or set shell environment variables such as
PATH, MANPATH, etc. modulefiles may be shared by many users on a
system and users may have their own collection to supplement or
replace the shared modulefiles. 

Modules can be loaded and unloaded dynamically and atomically, in an
clean fashion. All popular shells are supported, including bash, ksh,
zsh, sh, csh, tcsh, as well as some scripting languages such as perl. 

Modules are useful in managing different versions of
applications. Modules can also be bundled into metamodules that will
load an entire suite of different applications.
"""

base.paths    = ['./Modules/3.2.7/bin']
base.binaries = ['modulecmd', 'add.modules', 'mkroot']
base.includes=[]
base.libdirs=[]
base.libs=[]
base.compile_modules=['gnu']
base.required_modules=['tcl']
base.notes=""

s0 = load_modules
s1 = unpack_source
s2 = configure
s3 = make
s4 = make_install

standard_install = (s0, s1, s2, s3, s4)

base.install_steps = standard_install
base.tag = ''

ppc450d = copy(base)
ppc450d.build_host = 'ppc64'
ppc450d.compile_modules = ['gnu', 'ppc64_target']
ppc450d.target_arch = 'ppc64'
variants.append(ppc450d)

x86_64 = copy(base)
x86_64.build_host = 'x86_64'
x86_64.target_arch = 'x86_64'
variants.append(x86_64)


